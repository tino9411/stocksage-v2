const mongoose = require('mongoose');
const { Schema } = mongoose;

const HistoricalDataSchema = new Schema({
    date: { type: Date, required: true },
    open: { type: Number, required: true },
    high: { type: Number, required: true },
    low: { type: Number, required: true },
    close: { type: Number, required: true },
    adjClose: { type: Number, required: true },
    volume: { type: Number, required: true },
    unadjustedVolume: { type: Number, required: true },
    change: { type: Number, required: true },
    changePercent: { type: Number, required: true },
    vwap: { type: Number, required: true },
    label: { type: String, required: true },
    changeOverTime: { type: Number, required: true }
}, { _id: false });

const SECReportSchema = new Schema({
    filing_type: { type: String, required: true },
    url: { type: String, required: true },
    retrieved_at: { type: Date, default: () => new Date() },
    full_text: { type: String, required: true },
    full_text_length: { type: Number },
    truncated: { type: Boolean, default: false }
}, { _id: false });

const FinancialStatementSchema = new Schema({
    date: { type: Date, required: true },
    symbol: { type: String, required: true },
    reportedCurrency: { type: String },
    cik: { type: String },
    fillingDate: { type: Date },
    acceptedDate: { type: Date },
    calendarYear: { type: String },
    period: { type: String },
    revenue: { type: Number },
    costOfRevenue: { type: Number },
    grossProfit: { type: Number },
    grossProfitRatio: { type: Number },
    researchAndDevelopmentExpenses: { type: Number },
    generalAndAdministrativeExpenses: { type: Number },
    sellingAndMarketingExpenses: { type: Number },
    sellingGeneralAndAdministrativeExpenses: { type: Number },
    otherExpenses: { type: Number },
    operatingExpenses: { type: Number },
    costAndExpenses: { type: Number },
    interestIncome: { type: Number },
    interestExpense: { type: Number },
    depreciationAndAmortization: { type: Number },
    ebitda: { type: Number },
    ebitdaratio: { type: Number },
    operatingIncome: { type: Number },
    operatingIncomeRatio: { type: Number },
    totalOtherIncomeExpensesNet: { type: Number },
    incomeBeforeTax: { type: Number },
    incomeBeforeTaxRatio: { type: Number },
    incomeTaxExpense: { type: Number },
    netIncome: { type: Number },
    netIncomeRatio: { type: Number },
    eps: { type: Number },
    epsdiluted: { type: Number },
    weightedAverageShsOut: { type: Number },
    weightedAverageShsOutDil: { type: Number }
}, { _id: false });

const BalanceSheetSchema = new Schema({
    date: { type: Date, required: true },
    symbol: { type: String, required: true },
    reportedCurrency: { type: String },
    cik: { type: String },
    fillingDate: { type: Date },
    acceptedDate: { type: Date },
    calendarYear: { type: String },
    period: { type: String },
    cashAndCashEquivalents: { type: Number },
    shortTermInvestments: { type: Number },
    cashAndShortTermInvestments: { type: Number },
    netReceivables: { type: Number },
    inventory: { type: Number },
    otherCurrentAssets: { type: Number },
    totalCurrentAssets: { type: Number },
    propertyPlantEquipmentNet: { type: Number },
    goodwill: { type: Number },
    intangibleAssets: { type: Number },
    goodwillAndIntangibleAssets: { type: Number },
    longTermInvestments: { type: Number },
    taxAssets: { type: Number },
    otherNonCurrentAssets: { type: Number },
    totalNonCurrentAssets: { type: Number },
    otherAssets: { type: Number },
    totalAssets: { type: Number },
    accountPayables: { type: Number },
    shortTermDebt: { type: Number },
    taxPayables: { type: Number },
    deferredRevenue: { type: Number },
    otherCurrentLiabilities: { type: Number },
    totalCurrentLiabilities: { type: Number },
    longTermDebt: { type: Number },
    deferredRevenueNonCurrent: { type: Number },
    deferredTaxLiabilitiesNonCurrent: { type: Number },
    otherNonCurrentLiabilities: { type: Number },
    totalNonCurrentLiabilities: { type: Number },
    otherLiabilities: { type: Number },
    capitalLeaseObligations: { type: Number },
    totalLiabilities: { type: Number },
    preferredStock: { type: Number },
    commonStock: { type: Number },
    retainedEarnings: { type: Number },
    accumulatedOtherComprehensiveIncomeLoss: { type: Number },
    othertotalStockholdersEquity: { type: Number },
    totalStockholdersEquity: { type: Number },
    totalLiabilitiesAndStockholdersEquity: { type: Number },
    minorityInterest: { type: Number },
    totalEquity: { type: Number },
    totalLiabilitiesAndTotalEquity: { type: Number },
    totalInvestments: { type: Number },
    totalDebt: { type: Number },
    netDebt: { type: Number }
}, { _id: false });

const CashFlowStatementSchema = new Schema({
    date: { type: Date, required: true },
    symbol: { type: String, required: true },
    reportedCurrency: { type: String },
    cik: { type: String },
    fillingDate: { type: Date },
    acceptedDate: { type: Date },
    calendarYear: { type: String },
    period: { type: String },
    netIncome: { type: Number },
    depreciationAndAmortization: { type: Number },
    deferredIncomeTax: { type: Number },
    stockBasedCompensation: { type: Number },
    changeInWorkingCapital: { type: Number },
    accountsReceivables: { type: Number },
    inventory: { type: Number },
    accountsPayables: { type: Number },
    otherWorkingCapital: { type: Number },
    otherNonCashItems: { type: Number },
    netCashProvidedByOperatingActivities: { type: Number },
    investmentsInPropertyPlantAndEquipment: { type: Number },
    acquisitionsNet: { type: Number },
    purchasesOfInvestments: { type: Number },
    salesMaturitiesOfInvestments: { type: Number },
    otherInvestingActivites: { type: Number },
    netCashUsedForInvestingActivites: { type: Number },
    debtRepayment: { type: Number },
    commonStockIssued: { type: Number },
    commonStockRepurchased: { type: Number },
    dividendsPaid: { type: Number },
    otherFinancingActivites: { type: Number },
    netCashUsedProvidedByFinancingActivities: { type: Number },
    effectOfForexChangesOnCash: { type: Number },
    netChangeInCash: { type: Number },
    cashAtEndOfPeriod: { type: Number },
    cashAtBeginningOfPeriod: { type: Number },
    operatingCashFlow: { type: Number },
    capitalExpenditure: { type: Number },
    freeCashFlow: { type: Number }
}, { _id: false });

const KeyMetricsSchema = new Schema({
    date: { type: Date, required: true },
    period: { type: String, required: true},  // ‘annual’ or ‘quarterly’
    symbol: { type: String, required: true },
    revenuePerShare: { type: Number },
    netIncomePerShare: { type: Number },
    operatingCashFlowPerShare: { type: Number },
    freeCashFlowPerShare: { type: Number },
    cashPerShare: { type: Number },
    bookValuePerShare: { type: Number },
    tangibleBookValuePerShare: { type: Number },
    shareholdersEquityPerShare: { type: Number },
    interestDebtPerShare: { type: Number },
    marketCap: { type: Number },
    enterpriseValue: { type: Number },
    peRatio: { type: Number },
    priceToSalesRatio: { type: Number },
    pocfratio: { type: Number },
    pfcfRatio: { type: Number },
    pbRatio: { type: Number },
    ptbRatio: { type: Number },
    evToSales: { type: Number },
    enterpriseValueOverEBITDA: { type: Number },
    evToOperatingCashFlow: { type: Number },
    evToFreeCashFlow: { type: Number },
    earningsYield: { type: Number },
    freeCashFlowYield: { type: Number },
    debtToEquity: { type: Number },
    debtToAssets: { type: Number },
    netDebtToEBITDA: { type: Number },
    currentRatio: { type: Number },
    interestCoverage: { type: Number },
    incomeQuality: { type: Number },
    dividendYield: { type: Number },
    payoutRatio: { type: Number },
    salesGeneralAndAdministrativeToRevenue: { type: Number },
    researchAndDevelopmentToRevenue: { type: Number },
    intangiblesToTotalAssets: { type: Number },
    capexToOperatingCashFlow: { type: Number },
    capexToRevenue: { type: Number },
    capexToDepreciation: { type: Number },
    stockBasedCompensationToRevenue: { type: Number },
    grahamNumber: { type: Number },
    roic: { type: Number },
    returnOnTangibleAssets: { type: Number },
    grahamNetNet: { type: Number },
    workingCapital: { type: Number },
    tangibleAssetValue: { type: Number },
    netCurrentAssetValue: { type: Number },
    investedCapital: { type: Number },
    averageReceivables: { type: Number },
    averagePayables: { type: Number },
    averageInventory: { type: Number },
    daysSalesOutstanding: { type: Number },
    daysPayablesOutstanding: { type: Number },
    daysOfInventoryOnHand: { type: Number },
    receivablesTurnover: { type: Number },
    payablesTurnover: { type: Number },
    inventoryTurnover: { type: Number },
    roe: { type: Number },
    capexPerShare: { type: Number }
    }, { _id: false });
    
    const RealTimeQuoteSchema = new Schema({
    price: { type: Number },
    changesPercentage: { type: Number },
    change: { type: Number },
    dayLow: { type: Number },
    dayHigh: { type: Number },
    yearHigh: { type: Number },
    yearLow: { type: Number },
    marketCap: { type: Number },
    priceAvg50: { type: Number },
    priceAvg200: { type: Number },
    volume: { type: Number },
    avgVolume: { type: Number },
    open: { type: Number },
    previousClose: { type: Number },
    eps: { type: Number },
    pe: { type: Number },
    earningsAnnouncement: { type: Date },
    sharesOutstanding: { type: Number },
    timestamp: { type: Date }
    }, { _id: false });
    
    const StockSchema = new Schema({
    symbol: { type: String, required: true, unique: true },
    price: { type: Number },
    beta: { type: Number },
    volAvg: { type: Number },
    mktCap: { type: Number },
    lastDiv: { type: Number },
    range: { type: String },
    changes: { type: Number },
    companyName: { type: String },
    currency: { type: String },
    cik: { type: String },
    isin: { type: String },
    cusip: { type: String },
    exchange: { type: String },
    exchangeShortName: { type: String },
    industry: { type: String },
    website: { type: String },
    description: { type: String },
    ceo: { type: String },
    sector: { type: String },
    country: { type: String },
    fullTimeEmployees: { type: String },
    phone: { type: String },
    address: { type: String },
    city: { type: String },
    state: { type: String },
    zip: { type: String },
    dcfDiff: { type: Number },
    dcf: { type: Number },
    image: { type: String },
    ipoDate: { type: String },
    defaultImage: { type: Boolean },
    isEtf: { type: Boolean },
    isActivelyTrading: { type: Boolean },
    isAdr: { type: Boolean },
    isFund: { type: Boolean },
    last_updated: { type: Date, default: () => new Date() },
    historical_data: { type: [HistoricalDataSchema] },
    financial_ratios: { type: Map, of: Number },
    sec_reports: { type: [SECReportSchema] },
    income_statement: { type: [FinancialStatementSchema] },
    balance_sheets: { type: [BalanceSheetSchema] },
    cash_flow_statements: { type: [CashFlowStatementSchema] },
    key_metrics: { type: [KeyMetricsSchema] },
    real_time_quote: { type: RealTimeQuoteSchema },
    }, { timestamps: true });
    
    module.exports = mongoose.model('Stock', StockSchema);